1. __init__和__new__的区别
    __init__：通常用于初始化一个新实例，控制这个初始化的过程，比如添加一些属性， 做一些额外的操作，发生在类实例被创建完以后。它是实例级别的方法。
    __new__：通常用于控制生成一个新实例的过程。它是类级别的方法，__new__产生的实例也就是 __init__里面的的 self，然后利用这个实例来调用类的__init__方法
    __new__ 的作用:依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程
    的途径。还有就是实现自定义的metaclass。
    
    example:假如我们需要一个永远都是正数的整数类型，通过集成int，我们可能会写出这样的代码
    class PositiveInteger(int):
        def __init__(self, value):
            super(PositiveInteger, self).__init__(self, abs(value))
    __new__ 的作用        
    i = PositiveInteger(-3)
    print(i)
    result: -3
    但运行后会发现，结果根本不是我们想的那样，我们任然得到了-3。这是因为对于int这种 不可变的对象，我们只有重载它的__new__方法才能起到自定义的作用。
    
    After modify:
    class PositiveInteger(int):
        def __new__(cls, value):
            return super(PositiveInteger, cls).__new__(cls, abs(value))
    i = PositiveInteger(-3)
    print(i) 
    result:3
    通过重载__new__方法，我们实现了需要的功能。
    另外一个作用，关于自定义metaclass
    
